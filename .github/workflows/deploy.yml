name: Build and Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push to GHCR
    runs-on: [self-hosted, home]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-frontend-image:
    name: Build Frontend Container
    runs-on: [self-hosted, home]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-via-portainer:
    name: Deploy via Portainer  
    runs-on: [self-hosted, home]
    needs: [build-and-push, build-frontend-image]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Portainer
      env:
        PORTAINER_URL: https://portainer.sankalpnarula.com  # or http://localhost:9000
        PORTAINER_TOKEN: ${{ secrets.PORTAINER_ACCESS_TOKEN }}
        STACK_NAME: ocpp-chaos-sim
      run: |
        set -e
        echo "🚀 Starting deployment..."
        
        # Get stack ID and deploy (same script as before)
        STACK_ID=$(curl -s -H "X-API-Key: $PORTAINER_TOKEN" \
          "$PORTAINER_URL/api/stacks" | \
          jq -r ".[] | select(.Name == \"$STACK_NAME\") | .Id")
          
        # ... rest of deployment logic

    - name: Deployment Summary
      if: always()
      run: |
        echo "🎯 **Portainer Deployment Summary**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Status**: Deployment successful" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Portainer**: [View Stack](https://portainer.sankalpnarula.com)" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Backend Image**: \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Frontend Image**: \`ghcr.io/${{ github.repository }}-frontend:latest\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Check**: Review job logs for details" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup Tailscale Connection
      if: always()
      run: |
        echo "🔌 Cleaning up Tailscale connection..."
        sudo tailscale logout || true
        echo "✅ Tailscale disconnected"
